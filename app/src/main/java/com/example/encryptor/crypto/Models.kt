package com.example.encryptor.crypto

import com.example.encryptor.util.BYTES_FOR_SIZE_FIELD_IN_HEADER
import kotlin.reflect.KProperty1

data class EncryptionHeader(
    val contentCipherIv: ByteArray,
    val masterKeyPasswordCipherIv: ByteArray,
    val passwordSalt: ByteArray,
    val passwordEncryptedMasterKey: ByteArray
) // The rest is autogenerated by the IDE to allow valid comparisons.
{
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as EncryptionHeader

        if (!contentCipherIv.contentEquals(other.contentCipherIv)) return false
        if (!masterKeyPasswordCipherIv.contentEquals(other.masterKeyPasswordCipherIv)) return false
        if (!passwordSalt.contentEquals(other.passwordSalt)) return false
        if (!passwordEncryptedMasterKey.contentEquals(other.passwordEncryptedMasterKey)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = contentCipherIv.contentHashCode()
        result = 31 * result + masterKeyPasswordCipherIv.contentHashCode()
        result = 31 * result + passwordSalt.contentHashCode()
        result = 31 * result + passwordEncryptedMasterKey.contentHashCode()
        return result
    }
}


data class BiometricMetadata (
    val keyAliasStringBytes: ByteArray,
    val masterKeyBiometricCipherIv: ByteArray,
    val biometricallyEncryptedMasterKey: ByteArray
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BiometricMetadata

        if (!keyAliasStringBytes.contentEquals(other.keyAliasStringBytes)) return false
        if (!masterKeyBiometricCipherIv.contentEquals(other.masterKeyBiometricCipherIv)) return false
        if (!biometricallyEncryptedMasterKey.contentEquals(other.biometricallyEncryptedMasterKey)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = keyAliasStringBytes.hashCode()
        result = 31 * result + masterKeyBiometricCipherIv.contentHashCode()
        result = 31 * result + biometricallyEncryptedMasterKey.contentHashCode()
        return result
    }
}


data class PasswordEncryptionResult (
    val encryptedBytes: ByteArray,
    val iv: ByteArray,
    val passwordSalt: ByteArray
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as PasswordEncryptionResult

        if (!encryptedBytes.contentEquals(other.encryptedBytes)) return false
        if (!iv.contentEquals(other.iv)) return false
        if (!passwordSalt.contentEquals(other.passwordSalt)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = encryptedBytes.contentHashCode()
        result = 31 * result + iv.contentHashCode()
        result = 31 * result + passwordSalt.contentHashCode()
        return result
    }
}


data class HeaderField(
    // I.e. `property` is a reference to a property of EncryptionHeader whose value is a ByteArray.
    val property: KProperty1<EncryptionHeader, ByteArray>,
    val bytesForSizeField: Int = BYTES_FOR_SIZE_FIELD_IN_HEADER
)


data class MetadataField(
    val property: KProperty1<BiometricMetadata, ByteArray>,
    val bytesForSizeField: Int = BYTES_FOR_SIZE_FIELD_IN_HEADER
)