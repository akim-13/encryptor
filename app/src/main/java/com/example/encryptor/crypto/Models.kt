package com.example.encryptor.crypto

import java.util.UUID

data class EncryptionHeader(
    val contentCipherIv: ByteArray,
    val keyCipherIv: ByteArray,
    val passwordSalt: ByteArray,
    val encryptedStreamSecretKey: ByteArray
) // The rest is autogenerated by the IDE to allow valid comparisons.
{
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as EncryptionHeader

        if (!contentCipherIv.contentEquals(other.contentCipherIv)) return false
        if (!keyCipherIv.contentEquals(other.keyCipherIv)) return false
        if (!passwordSalt.contentEquals(other.passwordSalt)) return false
        if (!encryptedStreamSecretKey.contentEquals(other.encryptedStreamSecretKey)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = contentCipherIv.contentHashCode()
        result = 31 * result + keyCipherIv.contentHashCode()
        result = 31 * result + passwordSalt.contentHashCode()
        result = 31 * result + encryptedStreamSecretKey.contentHashCode()
        return result
    }
}


data class BiometricMetadata (
    val keyAlias: UUID,
    val encryptedKeyIv: ByteArray,
    val encryptedKey: ByteArray
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as BiometricMetadata

        if (keyAlias != other.keyAlias) return false
        if (!encryptedKeyIv.contentEquals(other.encryptedKeyIv)) return false
        if (!encryptedKey.contentEquals(other.encryptedKey)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = keyAlias.hashCode()
        result = 31 * result + encryptedKeyIv.contentHashCode()
        result = 31 * result + encryptedKey.contentHashCode()
        return result
    }
}
